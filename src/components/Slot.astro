---
interface Props {
  start: Date;
  end: Date;
  displaySize: number;
  type: string;
  children: any;
  rowSpan?: number;
}

const { start, end, type, rowSpan } = Astro.props;

const formatDate = (date: Date | string) => {
  if (typeof date === "string") {
    date = new Date(date);
  }

  return `${date.getHours()}h${date.getMinutes().toString().padStart(2, "0")}`;
};

const duration = (start: Date, end: Date) => {
  const diff = end.getTime() - start.getTime();
  const minutes = Math.floor(diff / 60000);
  return minutes;
};
---

<tr class={`${type}`}>
  <td class="p-3 text-sm text-center font-bold" rowspan={rowSpan}>
    {formatDate(start)} - {formatDate(end)}{
      type === "talk" && (
        <>
          <br />
          ğŸ•™ {duration(start, end)} min
        </>
      )
    }
  </td>
  <slot />
</tr>

<style lang="scss">
  tr.special {
    background: linear-gradient(45deg, #f4c042, #eb8581);
  }
  tr.pause {
    background: linear-gradient(45deg, #4ca8e7, #4f8df5);
  }
</style>

<style lang="scss" is:global>
  td,
  th {
    border: 1px solid rgba(black, 0.16);
  }
</style>
